"
" __   _(-)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
" ============================
" hopefully usable config
"
" based on work from Erik S. V. Jansson
"

"# Initialization: {
    let iCanHazVundle=1
    let vundle_readme=expand('~/.vim/bundle/Vundle.vim/README.md')
    if !filereadable(vundle_readme) 
        echo "Installing Vundle.."
        echo ""
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/VundleVim/Vundle.vim ~/.vim/bundle/Vundle.vim
        let iCanHazVundle=0
    endif
    set nocompatible " Enable features which aren't compatible with Vi.
    filetype off " Required by Vundle before setting the runtime paths.

    set rtp+=~/.vim/bundle/Vundle.vim " Specify the Vim runtime path...
    call vundle#begin('~/.vim/bundle') " The package install directory.
    Plugin 'VundleVim/Vundle.vim' " Useful if Vundle itself has update.
" } Initialization

"# Plugins: {
"## Functional: {
"        Plugin 'tpope/vim-repeat' " Extend the Vim '.' operator.
        Plugin 'tpope/vim-commentary.git' " Comment stuff out...
        Plugin 'tpope/vim-surround' " Change (){}<>'' in a snap.
"        Plugin 'godlygeek/tabular' " Easy automatic tabulations.
        Plugin 'scrooloose/nerdtree' " Better than NetRw, maybe.
"        Plugin 'majutsushi/tagbar' " Nice to get a code topview.
        Plugin 'tpope/vim-fugitive' " Probably best Git wrapper.
        Plugin 'airblade/vim-gitgutter' " Git Gutter
        Plugin 'tmhedberg/matchit' " The '%' now matches more k?
"        Plugin 'mileszs/ack.vim' " Forget IDE searches gtg fast!
"        Gundo requires Python 2.4 support
"        Plugin 'sjl/gundo.vim' " Why only have linear undo tree?
"        Plugin 'ajh17/VimCompletesMe' " Standardized auto-compl.
"        Plugin 'tpope/vim-dispatch' " When launching async jobs.
        Plugin 'junegunn/fzf', { 'do': './install --bin' }
        Plugin 'junegunn/fzf.vim'
        Plugin 'mhinz/vim-startify' " A fancy start screen, shows MRU etc.
        Plugin 'Yggdroot/indentLine'

        Plugin 'voldikss/vim-floaterm'

        Plugin 'MarcWeber/vim-addon-mw-utils'
        Plugin 'tomtom/tlib_vim'
        Plugin 'garbas/vim-snipmate'
        Plugin 'honza/vim-snippets'
        Plugin 'freitass/todo.txt-vim'
    " } Functional

"## Visual: {
        Plugin 'ap/vim-css-color'
        Plugin 'lilydjwg/colorizer'
        Plugin 'itchyny/lightline.vim' " For lightweight tbline.
        Plugin 'mengelbrecht/lightline-bufferline'
        Plugin 'luochen1990/rainbow'
    "} Visual

"## Themes: {
        Plugin 'morhetz/gruvbox' " The most amazing colorscheme.
        Plugin 'dracula/vim', { 'name': 'dracula' }
"        Plugin 'joshdick/onedark.vim' " OneDark Theme
"        Plugin 'chriskempson/base16-vim' " base16 Theme
"        Bundle 'daviesjamie/vim-base16-lightline'
"        Plugin 'pacokwon/onedarkhc.vim'
"        Plugin 'romgrk/doom-one.vim'
"        Plugin 'ghifarit53/tokyonight-vim'
    "} Themes

"## Language: {
"        Plugin 'beyondmarc/hlsl.vim' " Integrate HLSL highlight.
"        Plugin 'CaffeineViking/vim-glsl' " Add support for GLSL.
"        Plugin 'kbenzie/vim-spirv.git' " SPIRV syntax highlight.
    "} Languages

    if iCanHazVundle == 0
        echo "Installing Vundles, please ignore key map error messages"
        echo ""
        :PluginInstall
    endif
" } Plugins

"# Preliminaries: {
    call vundle#end() " Let Vundle finish initializing itself now.
    filetype plugin indent on " Enable file specific features...
" }

"# Settings: {
"## General: {
    set viminfo+=n~/.viminfo " Windows wants to use _viminfo >:(
    set autowrite " Write automatically when :make, :next etc...
    set autoread " Reload file when it has been changed externally.
    set nobackup " No need for .bkp files when version control exist.
    set nowritebackup " If Vim crashes often then turn backups on again, look at docs for more information.
    set noswapfile " Don't create swap files, nowadays we should have enough memory to store a text file.
    set complete-=i " Completion list for all included files is a bad idea, scanning could take a while.
    set updatetime=100 "timeout default 4000
    set sessionoptions-=options " Don't store options (global variables etc...) when making a session.

    set splitbelow
    set splitright

    set undodir=~/.vim/undoes " Where do we store all this awesomeness?!?!
    set undofile " Persistent undos are completely freaking awesome!!!

    let mapleader="," " This vimrc frowns on overwritten vim bindings, I use the ',' quite a lot.
    let g:mapleader="," " It is very rare to see Vim user use <Space> in normal mode, hence this.
    set history=1024 " Defines the number of stored commands Vim can remember, doesn't really matter :).
" } General

"## Autocompletions: {
    " Basically, Vim's built-in auto-completions support with uniform keyboard shortcuts.
    " We are using VimCompletesMe as the plugin of choice for making Vim's " built-in autocompletions be
    " more uniformly handled with an single key: <Tab> and <Shift>-<Tab>. It will attempt to derive what
    " the most suitable autocompletion function is to be called based on the context (omni, user etc...)
    set omnifunc=syntaxcomplete#Complete " Enables only the default Vim auto-completion (quite fast!!!).
    " The above autocompletion types will not call any external programs (it might however, call ctags).
    set completeopt+=longest " Attempts to insert longest obviously current common match found so far.
    set completeopt-=preview " Sometimes the [Scratch] preview window will pop-up. We don't want that.
    let g:vcm_direction='p' " First choice should be the *closest* matching entry (as Bram intended).
" } Autocompletions

"## Formatting: {
    set expandtab " Expand tab characters to space characters.
    set shiftwidth=4 " One tab is now 4 spaces.
    set shiftround " Always round up to the nearest tab.
    set tabstop=4 " This one is also needed to achieve the desired effect.
    set softtabstop=4 " Enables easy removal of an indentation level.

    set autoindent " Automatically copy the previous indent level. Don't use smartindent!!!
    set backspace=2 " Used for making backspace work like in most other editors (e.g. removing a single indent).
    set wrap " Wrap text. This is also quite optional, replace with textwidth=80 is you don't want this behaviour.
    set lazyredraw " Good performance boost when executing macros, redraw the screen only on certain commands.
    set breakindent
    set breakindentopt=shift:2
    set showbreak=â†³
" } Formatting

"## Searching: {
    set ignorecase " Search is not case sensitive, which is usually what we want.
    set smartcase " Will override some ignorecase properties, when using caps it will do a special search.
    set incsearch " Enables the user to step through each search 'hit', usually what is desired here.
    set hlsearch " Will stop highlighting current search 'hits' when another search is performed.
    set magic " Enables regular expressions. They are a bit like magic (not really though, DFA).

    " Ack and Ag are incredibly useful for searching really fast, forget slow IDE searching.
    if executable('ag') " The Silver Searcher, faster than 'ack' (mostly)
        let g:ackprg = 'ag --vimgrep' " Enables ag compat. with vim.
    endif " Will use 'ag' if exists, otherwise uses normal Ack.
" } Searching

"## Interface: {
    set ffs=unix,dos,mac " Prioritize unix as the standard file type.
    set encoding=utf-8 " Vim can now work with a whole bunch more characters (powerline too).
    set scrolloff=4 " The screen will only scroll when the cursor is 8 characters from the top/bottom.
    set foldmethod=indent " Pressing zc will close a fold at the current indent while zo will open one.
    set foldopen+=jump " Additionally, open folds when there is a direct jump to the location.
    set foldlevel=99 " many folds open

    set wildmenu " Enable the 'autocomplete' menu when in command mode (':').
    set wildmode=list:longest,full
    set cursorline " For easier cursor spotting. Completely optional though (but so is bathing).
    set colorcolumn=80
    set shortmess=at " Shorten some command mode messages, will keep you from having to hit ENTER all the time.
    " set cmdheight=2 " Might decrease the number of times for hitting enter even more, double default height.
    set stal=2 " Always show the tab lines, which makes the user interface a bit more consistent.

    set showmatch " Will highlight matching brackets.
    set mat=2 " How long the highlight will last.
    set number " Show line numbers on left side.
    set relativenumber " Enables the user to easily see the relative distance between cursor and target line.
    set ttyfast " Will send characters over a terminal connection faster. We do have fast connections after all.
    set ruler " Always show current cursor position, which might be needed for the character column location.
    set hidden " Abandon buffer when closed, which is usually what we want to do in this case.

    syntax on " The most important feature when coding. Vim please bless us with this option right now!.
    set laststatus=2 " Always have a status line, this is required in order for Lightline to work correctly.
    set noshowmode " Disables standard -INSERT-, -NORMAL-, etc... Lightline will provide a better looking one for us.
    "set t_Co=256 " This will 'force' terminals to use 256 colors, enabling Lightline and the colorscheme to look correct.
    set background=dark " Cool programmers only use dark themes. It's good for your eyes man, really nice!
    set termguicolors
"    silent! colorscheme gruvbox " I love this theme. Big kudos to the developer of this theme.
    let g:tokyonight_style = 'night'
    let g:tokyonight_transparent_background = 1
    let g:tokyonight_enable_italics = 1

    colorscheme gruvbox


"### LightLine Components: {
        function! LightLineModified()
            if &modified
                return "+"
            else
                return ""
            endif
        endfunction
        function! LightLineReadonly()
            if &readonly
                return "RO"
            else
                return ""
            endif
        endfunction
        function! LightLineFugitive()
            if exists("*fugitive#head")
                let branch = FugitiveHead()
"                let branch = fugitive#head()
                return branch !=# '' ? 'î‚  '.branch : 'î‚  [No Head]'
            else
                return 'î‚  [No Head]'
            endif
            return ''
        endfunction
        function! LightLineFilename()
            return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                 \ ('' != expand('%:f') ? expand('%:f') : '[No Name]') .
                 \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
        endfunction
        function! GitStatus()
            let [a,m,r] = GitGutterGetHunkSummary()
            return printf('+%d ~%d -%d', a, m, r)
        endfunction
    " } Lightline Function

"### Windows: {
        let g:tagbar_width = 48
        let g:NERDTreeWinSize = 48
        let g:NERDTreeMinimalUI = 1
        let g:NERDTreeShowLineNumbers = 1
        let g:NERDTreeWinPos = "right"
        let g:NERDTreeShowHidden = 1
        autocmd FileType nerdtree setlocal relativenumber
        let g:tagbar_show_linenumbers = -1 " Global conf.
        let g:tagbar_map_showproto=""
        let g:tagbar_autofocus = 1
        let g:tagbar_compact = 1
        let g:snipMate = { 'snippet_version' : 1 }
    " } Windows

"### Graphical: {
        if has("gui_running")
            set guioptions=i " Kill them toolbars!
            set guifont=Hack\ 10,Monospace\ 10
        else
            set mouse=a " Mouse support if needed.
        endif

        " A LightLine Theme
        let g:lightline = {
        \ 'colorscheme': 'gruvbox',
        \ 'active': {
        \  'left': [[ 'mode' ], [ 'paste' ], [ 'fugitive' ], [ 'gitstatus' ], [ 'filename', 'modified', 'readonly' ]],
        \  'right': [[ 'linenums' ], [ 'fileencoding', 'fileformat' ], [ 'filetype']]
        \ },
        \ 'inactive': {
        \  'left': [[ 'mode' ], [ 'fugitive' ], [ 'gitstatus' ], [ 'filename', 'modified', 'readonly' ]],
        \  'right': [[ 'linenums' ], [ 'fileencoding', 'fileformat' ], [ 'filetype']]
        \ },
        \ 'tabline': {
        \   'left': [ ['buffers'] ],
        \   'right': [ ['close'] ]
        \ },
        \ 'component_expand': {
        \   'buffers': 'lightline#bufferline#buffers'
        \ },
        \ 'component_type': {
        \   'buffers': 'tabsel'
        \ },
        \ 'component': {
        \   'linenums': 'â˜°  %3l/%L:%-2c',
        \   'filetype': '%{&ft!=#""?&ft:"[No Type]"}'
        \ },
        \ 'component_function': {
        \   'gitstatus': 'GitStatus',
        \   'fugitive2': 'FugitiveHead',
        \   'fugitive': 'LightLineFugitive',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified',
        \   'filename': 'LightLineFilename',
        \ },
        \ 'mode_map': {
        \ 'n' : 'N',
        \ 'i' : 'I',
        \ 'R' : 'R',
        \ 'v' : 'V',
        \ 'V' : 'VL',
        \ "\<C-v>": 'VB',
        \ 'c' : 'C',
        \ 's' : 'S',
        \ 'S' : 'SL',
        \ "\<C-s>": 'SB',
        \ 't': 'T',
        \ },
        \ }
"        \ 'separator':    { 'left': 'î‚°', 'right': 'î‚²' },
"        \ 'subseparator': { 'left': 'î‚±', 'right': 'î‚³' }

        let g:lightline#bufferline#show_number  = 2
        let g:lightline#bufferline#shorten_path = 0
        let g:lightline#bufferline#unnamed      = '[No Name]'

        " FZF Settings
        " Customize fzf colors to match your color scheme

    let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
        \ 'bg':      ['bg', 'Normal'],
        \ 'hl':      ['fg', 'Comment'],
        \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
        \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
        \ 'hl+':     ['fg', 'Statement'],
        \ 'info':    ['fg', 'PreProc'],
        \ 'border':  ['fg', 'Ignore'],
        \ 'prompt':  ['fg', 'Conditional'],
        \ 'pointer': ['fg', 'Exception'],
        \ 'marker':  ['fg', 'Keyword'],
        \ 'spinner': ['fg', 'Label'],
        \ 'header':  ['fg', 'Comment'] }


        " - Popup window (center of the screen)
        if has ('popupwin')
            let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
        endif
    " } Graphical

    set list " Enables the characters to be displayed.
    " Useful for showing trailing whitespace and others.
    set listchars=tab:â€º\ ,trail:â€¢,extends:>,precedes:<,nbsp:_
"    set listchars=tab:>Â·,trail:~,extends:>,precedes:<,space:Â·
"    set listchars=tab:>Â·,trail:~,extends:>,precedes:<

    " Startify
    let g:startify_bookmarks = [
      \ $HOME . '/.vimrc', $HOME . '/.xmonad/xmonad.hs',
      \ $HOME . '/.config/i3/config', $HOME . '/.config/zsh/.zshrc'
      \ ]
    let g:startify_custom_header = [
      \ '   ViM-World (c)2021 by EddieFAF',
      \ ''
      \ ]
    let g:startify_files_number = 5

    " } Interface
" } Settings

"# Mappings: {
    " Will remove latest search/replace highlight.
    nnoremap <silent> <C-L> :silent! nohl<cr><C-L>

    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-h> <C-w>h
    nnoremap <C-l> <C-w>l

    nnoremap <leader>j :m .+1<CR>==
    nnoremap <leader>k :m .-2<CR>==

    " FZF Mappings
    nnoremap <leader>fb :Buffers<cr>
    nnoremap <leader>fc :History:<cr>
    nnoremap <leader>ff :Files<cr>
    nnoremap <leader>fg :GFiles<cr>
    nnoremap <leader>fh :History<cr>
    nnoremap <leader>fl :Lines<cr>
    nnoremap <leader>fm :Maps<cr>
    nnoremap <leader>fr :Ag<cr>
    nnoremap <leader>fw :Windows<cr>

    " Useful to toggle the NERDTree window back and forth.
    nnoremap <leader>f :NERDTreeToggle<cr>
    let NERDTreeShowHidden=1

    " Floaterm
    let g:floaterm_opener = 'edit'
    vnoremap <leader>m :FloatermNew --autoclose=2 vifm<CR>
    nnoremap <leader>m :FloatermNew --autoclose=2 vifm<CR>

    " Here we have one of the things I and regular Vim
    " disagree on. Both 'C' and 'D' behave as c$ or d$
    " while Y behaves as yy. I don't like this at all.
    nmap Y y$

    " Remap to inc/dec with +/- in normal mode
    nnoremap + <C-a>
    nnoremap - <C-x>

    nmap <C-p> :Files<CR>
    nmap <C-e> :Buffers<CR>
    let g:fzf_action = { 'ctrl-e': 'edit' }

    " Shortcut Ag searching.
"    noremap <leader>f :Ack! 
    " Shortcut for Tabulate.
"    noremap <leader>a :Tab /

    " Quickly edit/source .vimrc
    noremap <Leader>ve :edit $HOME/.vim/vimrc<CR>
    noremap <Leader>vs :source $HOME/.vim/vimrc<CR>

    " Yank(copy) to system clipboard
    noremap <Leader>y "+y
    noremap <leader>p "+p

    " Toggle pastemode, doesn't indent
    set pastetoggle=<leader>i

    " Toggle folding
    " http://vim.wikia.com/wiki/Folding#Mappings_to_toggle_folds
"    nnoremap <silent> <Leader><Space> @=(foldlevel('.')?'za':"\<Space>")<CR>

    " Toggle relativenumber
    nnoremap <silent> <Leader>r :set relativenumber!<CR>

    " Treat wrapped lines as normal lines
    nnoremap <expr> k v:count == 0 ? 'gk' : 'k'
    nnoremap <expr> j v:count == 0 ? 'gj' : 'j'

    " TAB in general mode will move to text buffer
"    nnoremap <TAB> :bnext<CR>
    " SHIFT-TAB will go back
"    nnoremap <S-TAB> :bprevious<CR>

    " Quickly switch buffers
    nnoremap <Leader>bn :bnext<CR>
    nnoremap <Leader>bp :bprevious<CR>
    nnoremap <Leader>bf :b#<CR>
    nnoremap <Leader>b1 :1b<CR>
    nnoremap <Leader>b2 :2b<CR>
    nnoremap <Leader>b3 :3b<CR>
    nnoremap <Leader>b4 :4b<CR>
    nnoremap <Leader>b5 :5b<CR>
    nnoremap <Leader>b6 :6b<CR>
    nnoremap <Leader>b7 :7b<CR>
    nnoremap <Leader>b8 :8b<CR>
    nnoremap <Leader>b9 :9b<CR>
    nnoremap <Leader>b0 :10b<CR>
    " close buffer
    nnoremap <silent> <leader>bd :bd<CR>

    " kill buffer
    nnoremap <silent> <leader>bk :bd!<CR>

    " Highlight last inserted text
    nnoremap gV '[V']

    " Quickly edit/source .vimrc
    noremap <Leader>ve :edit $HOME/.vimrc<CR>
    noremap <Leader>vs :source $HOME/.vimrc<CR>

    " For the terminal
    noremap <leader>/ :split<CR> :resize 10<CR> :term<CR> 

    " Fugitive Keybinds
    nnoremap <leader>gs :Git<CR>
    nnoremap <leader>gc :Gcommit -v -q<CR>
    nnoremap <leader>ga :Gcommit --amend<CR>
    nnoremap <leader>gt :Gcommit -v -q %<CR>
    nnoremap <leader>gd :Gdiff<CR>
    nnoremap <leader>ge :Gedit<CR>
    nnoremap <leader>gr :Gread<CR>
    nnoremap <leader>gw :Gwrite<CR><CR>
    nnoremap <leader>gl :silent! Glog<CR>
    nnoremap <leader>gp :Ggrep<Space>
    nnoremap <leader>gm :Gmove<Space>
    nnoremap <leader>gb :Git branch<Space>
    nnoremap <leader>go :Git checkout<Space>
    nnoremap <leader>gps :Dispatch! git push<CR>
    nnoremap <leader>gpl :Dispatch! git pull<CR>

" } Mappings

"# Functions: {
    " Toggle syntax highlighting
    function! ToggleSyntaxHighlighting()
      if exists('g:syntax_on')
        syntax off
      else
        syntax enable
      endif
    endfunction
    nnoremap <Leader>s :call ToggleSyntaxHighlighting()<CR>

    """ Highlight characters past 79, toggle with <Leader>h
    """ You might want to override this function and its variables with
    """ your own in .vimrc.last which might set for example colorcolumn or
    """ even the textwidth. See https://github.com/timss/vimconf/pull/4
    let g:overlength_enabled = 0
    highlight OverLength ctermbg=238 guibg=#444444

    function! ToggleOverLength()
      if g:overlength_enabled == 0
        match OverLength /\%79v.*/
        let g:overlength_enabled = 1
        echo 'OverLength highlighting turned on'
      else
        match
        let g:overlength_enabled = 0
        echo 'OverLength highlighting turned off'
      endif
    endfunction
    nnoremap <Leader>hl :call ToggleOverLength()<CR>

    " Toggle text wrapping, wrap on whole words
    " For more info see: http://stackoverflow.com/a/2470885/1076493
    function! WrapToggle()
      if &wrap
        set list
        set nowrap
      else
        set nolist
        set wrap
      endif
    endfunction
    nnoremap <Leader>w :call WrapToggle()<CR>

    " Strip trailing whitespace, return to cursor at save
    function! StripTrailingWhitespace()
      let l:save = winsaveview()
      %s/\s\+$//e
      call winrestview(l:save)
    endfunction
" } Functions

"# Autogroups: {
    augroup StripTrailingWhitespace
      autocmd!
      autocmd FileType c,cpp,cfg,conf,css,html,perl,python,sh,tex,yaml
        \ autocmd BufWritePre <buffer> :call
        \ StripTrailingWhitespace()
    augroup END

    " Return to last edit position when opening files
    augroup LastPosition
      autocmd! BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     exe "normal! g`\"" |
        \ endif
    augroup END

    if has("autocmd")
      augroup templates
        autocmd BufNewFile docker-compose.* 0r ~/.vim/templates/docker-compose.template
      augroup END
    endif

"    augroup vim_folding
"      autocmd!
"      autocmd FileType vim set foldmethod=expr foldlevel=0
"      " note that double quote in foldexpr has to be escaped with backslash
"      autocmd FileType vim set foldexpr=getline(v:lnum)=~'^\"#'?'>'.(matchend(getline(v:lnum),'\"#*')-1):'='
"    augroup END
" } Autogroups

