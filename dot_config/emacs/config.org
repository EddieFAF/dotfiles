#+TITLE: My Emacs Config
#+AUTHOR: Eddie

* Inhaltsverzeichnis                                                    :TOC:
- [[#startup-performance][STARTUP PERFORMANCE]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#native-compil][Native Compil]]
- [[#package-management][PACKAGE MANAGEMENT]]
  - [[#setup-packageel-to-work-with-melpa][Setup package.el to work with MELPA.]]
  - [[#installing-use-package][Installing use-package]]
  - [[#auto-updater][Auto Updater]]
- [[#defaults][DEFAULTS]]
- [[#fonts][FONTS]]
- [[#some-useful-things][SOME USEFUL THINGS]]
- [[#general-key-bindings][GENERAL KEY BINDINGS]]
- [[#evil-mode][EVIL MODE]]
- [[#completion-systems][COMPLETION SYSTEMS]]
  - [[#company][COMPANY]]
  - [[#counsel-ivy-and-co][COUNSEL, IVY and Co]]
- [[#neotree][NEOTREE]]
- [[#zooming][ZOOMING]]
- [[#all-icons][ALL ICONS]]
- [[#dashboard][DASHBOARD]]
- [[#modeline][MODELINE]]
- [[#projectile][PROJECTILE]]
- [[#theme][THEME]]
- [[#which-key][WHICH KEY]]
- [[#files][FILES]]
  - [[#dired][DIRED]]
  - [[#file-related-keybindings][File-related keybindings]]
  - [[#installing-some-useful-file-related-modules][Installing Some Useful File-related Modules]]
- [[#org-mode][ORG MODE]]
  - [[#general-org-mode-settings][General ORG Mode settings]]
  - [[#org-todo-keywords][ORG ToDo Keywords]]
  - [[#source-code-block-syntax-highlighting][Source Code Block Syntax Highlighting]]
  - [[#automatically-create-table-of-contents][Automatically Create Table of Contents]]
- [[#scrolling][SCROLLING]]
- [[#coding][CODING]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]

* STARTUP PERFORMANCE
** Garbage Collection
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)
(defun faf/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
   (format "%.2f seconds"
   (float-time
     (time-subtract after-init-time before-init-time)))
   gcs-done))
(add-hook 'emacs-startup-hook #'faf/display-startup-time)
#+END_SRC

** Native Compil
#+BEGIN_SRC emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(setq comp-async-report-warnings-errors nil)

(if (boundp 'comp-deferred-compilation)
  (setq comp-deferred-compilation nil)
  (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+END_SRC

* PACKAGE MANAGEMENT
** Setup package.el to work with MELPA.

#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC

** Installing use-package

#+BEGIN_SRC emacs-lisp
(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC

** Auto Updater
We want to keep our packages uptodate, atleast once in a while
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :ensure t
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+END_SRC

* DEFAULTS
setting some defaults here
First we make things cleaner by moving stuff outta the .emacs.d folder
NOTE: If you want to move everything out of the ~/.emacs.d folder
reliably, set `user-emacs-directory` before loading no-littering!
#+BEGIN_SRC emacs-lisp
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering
  :ensure t)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+END_SRC

Now we are disabling a few more things, starting with backup files
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

We are disabling menus, toolbars and scrollbars
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(menu-bar-mode -1)                   ;; Menubar
(tool-bar-mode -1)                   ;; toolbar
(scroll-bar-mode -1)                 ;; scrollbar
(defalias 'yes-or-no-p 'y-or-n-p)    ;; set yes-or-no to y-or-n
(global-display-line-numbers-mode 1) ;; linenumbers
(global-visual-line-mode t)          ;; linewraps
(global-hl-line-mode t)              ;; highlight actual line
(setq column-number-mode t)          ;; show columns in modeline
(setq line-number-mode t)            ;; show linenumber in modeline

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                dashboard-mode-hook
                neotree-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

* FONTS
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
  :font "Source Code Pro"
  :height 100
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 110
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Source Code Pro"
  :height 100
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)

;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Source Code Pro-11"))
;; changes certain keywords to symbols, such as lamda!
(setq global-prettify-symbols-mode t)
#+END_SRC

* SOME USEFUL THINGS
Save position in file in order to return here next time the file is opened.
#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
(global-auto-revert-mode 1)
#+END_SRC

* GENERAL KEY BINDINGS

#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t))
(nvmap :keymaps 'override :prefix "SPC"
        "SPC"   '(counsel-M-x :which-key "M-x")
        "."     '(find-file :which-key "Find file")
        "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
        ;; Buffer
        "b"     '(:ignore t :which-key "Buffer")
        "b b"   '(ibuffer :which-key "Ibuffer")
        "b k"   '(kill-current-buffer :which-key "Kill current buffer")
        "b n"   '(next-buffer :which-key "Next buffer")
        "b p"   '(previous-buffer :which-key "Previous buffer")
        "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
        "b K"   '(kill-buffer :which-key "Kill buffer")
        ;; Relad Config
        "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
        ;; Windows Splits
        "w"     '(:ignore t :which-key "Window related")
        "w c"   '(evil-window-delete :which-key "Close window")
        "w n"   '(evil-window-new :which-key "New window")
        "w s"   '(evil-window-split :which-key "Horizontal split window")
        "w v"   '(evil-window-vsplit :which-key "Vertical split window")
        ;; Windows move
        "w h"   '(evil-window-left :which-key "Window left")
        "w j"   '(evil-window-down :which-key "Window down")
        "w k"   '(evil-window-up :which-key "Window up")
        "w l"   '(evil-window-right :which-key "Window right")
        "w <left>"   '(evil-window-left :which-key "Window left")
        "w <down>"   '(evil-window-down :which-key "Window down")
        "w <up>"   '(evil-window-up :which-key "Window up")
        "w <right>"   '(evil-window-right :which-key "Window right")
        "w w"   '(evil-window-next :which-key "Goto next window"))
(nvmap :keymaps 'override :prefix "SPC"
        "m"     '(:ignore t :which-key "ORG Mode")
        "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
        "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
        "m ."   '(counsel-org-goto :which-key "Counsel org goto")
        "m e"   '(org-export-dispatch :which-key "Org export dispatch")
        "m f"   '(org-footnote-new :which-key "Org footnote new")
        "m h"   '(org-toggle-heading :which-key "Org toggle heading")
        "m i"   '(org-toggle-item :which-key "Org toggle item")
        "m n"   '(org-store-link :which-key "Org store link")
        "m o"   '(org-set-property :which-key "Org set property")
        "m t"   '(org-todo :which-key "Org todo")
        "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
        "m B"   '(org-babel-tangle :which-key "Org babel tangle")
        "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
        "m T"   '(org-todo-list :which-key "Org todo list")
        "o a"   '(org-agenda :which-key "Org agenda")
        )
#+END_SRC

* EVIL MODE

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+END_SRC

* COMPLETION SYSTEMS
** COMPANY
Auto Completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)
  (global-company-mode t))
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))
#+END_SRC

** COUNSEL, IVY and Co
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))
(use-package ivy
  :defer 0.1
  :diminish
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))
(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
;  :config
;  (ivy-set-display-transformer 'ivy-switch-buffer
;   'ivy-rich-switch-buffer-transformer)
  (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+END_SRC

*** Ivy-posframe
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its candidate menu.  Some of the settings below involve:

- ivy-posframe-display-functions-alist – sets the display position for specific programs
- ivy-posframe-height-alist – sets the height of the list displayed for specific programs

Available functions (positions) for ‘ivy-posframe-display-functions-alist’

- ivy-posframe-display-at-frame-center
- ivy-posframe-display-at-window-center
- ivy-posframe-display-at-frame-bottom-left
- ivy-posframe-display-at-window-bottom-left
- ivy-posframe-display-at-frame-bottom-window-center
- ivy-posframe-display-at-point
- ivy-posframe-display-at-frame-top-center

NOTE: If the setting for ‘ivy-posframe-display’ is set to ‘nil’ (false), anything that is set to ‘ivy-display-function-fallback’ will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to ‘t’ (true), then the fallback position will be centered in the window.
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe
  :init
  (setq ivy-posframe-display-functions-alist
  '((swiper                     . ivy-posframe-display-at-point)
    (complete-symbol            . ivy-posframe-display-at-point)
    (counsel-M-x                . ivy-display-function-fallback)
    (counsel-esh-history        . ivy-posframe-display-at-window-center)
    (counsel-describe-function  . ivy-display-function-fallback)
    (counsel-describe-variable  . ivy-display-function-fallback)
    (counsel-find-file          . ivy-display-function-fallback)
    (counsel-recentf            . ivy-display-function-fallback)
    (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
    (dmenu                      . ivy-posframe-display-at-frame-top-center)
    (nil                        . ivy-posframe-display))
  ivy-posframe-height-alist
 '((swiper . 20)
   (dmenu . 20)
   (t . 10)))
  :config
  (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
#+END_SRC

* NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be configed by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp
;; Function for setting a fixed width for neotree.
;; Defaults to 25 but I make it a bit longer (35) in the 'use-package neotree'.
(defcustom neo-window-width 25
  "*Specifies the width of the NeoTree window."
  :type 'integer
  :group 'neotree)

(use-package neotree
  :config
  (setq neo-smart-open t
        neo-window-width 30
        neo-theme (if (display-graphic-p) 'icons 'arrow)
        ;;neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action)
        ;; truncate long file names in neotree
  (add-hook 'neo-after-create-hook
      #'(lambda (_)
        (with-current-buffer (get-buffer neo-buffer-name)
            (setq truncate-lines t)
            (setq word-wrap nil)
            (make-local-variable 'auto-hscroll-mode)
            (setq auto-hscroll-mode nil)))))

;; show hidden files
(setq-default neo-show-hidden-files t)

(nvmap :prefix "SPC"
       "t n"   '(neotree-toggle :which-key "Toggle neotree file viewer")
       "d n"   '(neotree-dir :which-key "Open directory in neotree"))
#+END_SRC

* ZOOMING
use Ctrl +/- or Ctrl-Mousewheel to zoom text
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
#+END_SRC

* ALL ICONS
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
#+END_SRC

* DASHBOARD
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-center-content t)
  (setq dashboard-items '((recents . 10 )
                          (agenda . 5 )
                          (bookmarks . 5)
                          (projects . 5)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book"))))
#+END_SRC

* MODELINE
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :custom ((doom-modeline-height 15)))
(doom-modeline-mode 1)
#+END_SRC

* PROJECTILE
Project Management
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1))
#+END_SRC

* THEME
This is going to be changed to tokyonight later on
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t)
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
(load-theme 'doom-tokyo-night t)
#+END_SRC

* WHICH KEY

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-idle-delay 0.3
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+END_SRC


* FILES
** DIRED

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :custom ((dired-listing-switches "-agho --group-directories-first")))

(use-package dired-single
  :ensure t)

(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode))
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "d"   '(:ignore t :which-key "Dired related")
               "d d" '(dired :which-key "Open dired")
               "d j" '(dired-jump :which-key "Dired jump to current"))
#+END_SRC

** File-related keybindings
#+BEGIN_SRC emacs-lisp
    (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "f"     '(:ignore t :which-key "File related")
    "."     '(find-file :which-key "Find file")
    "f f"   '(find-file :which-key "Find file")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+END_SRC

** Installing Some Useful File-related Modules
Though ‘recentf’ is one way to find recent files although I prefer using ‘counsel-recentf’.
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (recentf-mode))
(use-package sudo-edit) ;; Utilities for opening files with sudo
#+END_SRC

* ORG MODE
** General ORG Mode settings
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/org/"
      org-agenda-files '("~/org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ▼ "
      org-use-fast-todo-selection t
      org-hide-emphasis-markers t)
(setq org-log-done 'time
      org-journal-dir "~/org/journal/"
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")
(setq org-log-into-drawer t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)

(global-set-key (kbd "C-c a") 'org-agenda)
(setq calendar-week-start-day 1
      calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                               "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                 "Juni" "Juli" "August" "September"
                                 "Oktober" "November" "Dezember"])

(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

(use-package org-tempo
  :ensure nil) ;; it is already there
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+END_SRC

** ORG ToDo Keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords    ; This overwrites the default Doom org-todo-keywords
    '((sequence
       "TODO(t)"           ; A task that is ready to be tackled
       "PROJ(p)"           ; A project that contains other tasks
       "WAIT(w)"           ; Something is holding up this task
       "|"                 ; The pipe necessary to separate "active" states and "inactive" states
       "DONE(d)"           ; Task has been completed
       "CANCELLED(c)" )))  ; Task has been cancelled
#+END_SRC

** Source Code Block Syntax Highlighting
We want the same syntax highlighting in source blocks as in the native language files.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

** Automatically Create Table of Contents
Toc-org helps you to have an up-to-date table of contents in org files without exporting (useful useful for README files on GitHub).  Use :TOC: to create the table.
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

* SCROLLING
#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

* CODING
** Rainbow Delimiters
rainbow-delimiters is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

